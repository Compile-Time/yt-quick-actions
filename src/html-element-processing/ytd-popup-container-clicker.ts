import { buffer, debounceTime, first, Subject } from "rxjs";
import { YtdMenuServiceItemRendererSvgExtractor } from "../mutations/ytd-menu-service-item-renderer-svg-extractor";
import { OneshotObserver } from "../observation/observer-types";
import { OneshotObserverId } from "../enums/oneshot-observer-id";
import { SvgDrawPathNavigationFilter } from "../html-navigation/filter/navigation-filter";
import { SvgDrawPath } from "./element-data";
import { MutationSummary } from "mutation-summary";
import { clickTargetSvgFromMatchingMutationsElementExtractor } from "../mutations/mutations-element-extractor-clickers";
import { contentScriptObserversManager } from "../content_scripts/init-globals";

export type SvgOptionFn = (svgOption: HTMLElement) => void;

export class YtdPopupContainerClicker {
  public readonly popupContainer: HTMLElement;
  public connectedOneshotMutationsExtractorEmitter?: OneshotObserver;
  private subject = new Subject<YtdMenuServiceItemRendererSvgExtractor>();

  constructor(ytdPopupContainer: HTMLElement) {
    this.popupContainer = ytdPopupContainer;
  }

  static createOneshotObserverForClicker(
    oneshotObserverId: OneshotObserverId,
    svgToClick: SvgDrawPath,
    clicker: YtdPopupContainerClicker
  ): OneshotObserver {
    return new OneshotObserver(oneshotObserverId, () => {
      const svgPathFilter = new SvgDrawPathNavigationFilter(svgToClick);
      const summary = new MutationSummary({
        callback: (summaries) =>
          clicker.pushMutationsExtractor(
            new YtdMenuServiceItemRendererSvgExtractor(svgPathFilter, summaries)
          ),
        rootNode: clicker.popupContainer,
        queries: [
          { element: `path[d="${svgToClick}"]` },
          { attribute: "hidden" },
        ],
      });
      summary.disconnect();
      return summary;
    });
  }

  pushMutationsExtractor(
    mutations: YtdMenuServiceItemRendererSvgExtractor
  ): void {
    this.subject.next(mutations);
  }

  connectToMutationsExtractorEmitterOneshotObserver(
    oneshotObserver: OneshotObserver
  ): void {
    this.connectedOneshotMutationsExtractorEmitter = oneshotObserver;
  }

  /**
   * Observe {@link YtdMenuServiceItemRendererSvgExtractor}s generated by this {@link YtdPopupContainerClicker} with a debounce and buffer
   * them before running any extraction logic on them.
   *
   * This method uses RxJS to facilitate the debounce and buffer behaviour. The reason and use case for this
   * method is the following: The `ytd-popup-container` keeps as many `ytd-menu-service-item-renderer` elements
   * around as are needed for the current page. However, the behaviour for this functionality is interesting:
   * - If a page needs more `ytd-menu-service-item-renderer` elements, existing entries are hidden, new hidden
   * entries are added then all entries are made visible.
   * - If a page needs less, all entries are hidden, the unneeded entries are removed and then all are made visible.
   * - If a page does not need more or less entries but the actions themselves change, all
   * `ytd-menu-service-item-renderer` elements are hidden, then the contained SVG of
   * some of the `ytd-menu-service-item-renderer` elements is changed and then the elements are un-hidden.
   *
   * Therefore, it is not enough to check for the visibility or add mutation of a `ytd-menu-service-item-renderer`
   * element because its contained SVG might change. So a short term buffer is needed which contains all DOM
   * mutation changes in the millisecond range. This buffer can then be checked for the existing of an SVG add mutation.
   *
   * @param clickCallback Optional: Custom callback to run on the found `svgToClick` element instead of calling
   * `HTMLElement.click()` on it.
   */
  observeAndBufferMutationChangesThenClickSvg(
    clickCallback?: SvgOptionFn
  ): void {
    if (this.connectedOneshotMutationsExtractorEmitter) {
      contentScriptObserversManager
        .upsertOneshotObserver(this.connectedOneshotMutationsExtractorEmitter)
        .observe();
    }

    this.subject
      .pipe(buffer(this.subject.pipe(debounceTime(10))), first())
      .subscribe(
        (mutationChanges: YtdMenuServiceItemRendererSvgExtractor[]) => {
          clickTargetSvgFromMatchingMutationsElementExtractor(
            mutationChanges,
            clickCallback
          );
          if (this.connectedOneshotMutationsExtractorEmitter) {
            this.connectedOneshotMutationsExtractorEmitter.disconnect();
          }
          this.popupContainer.removeAttribute("hidden");
        }
      );

    // Hide the popup container so there is no drop-down flicker when triggering a quick action.
    this.popupContainer.setAttribute("hidden", "");
  }
}
